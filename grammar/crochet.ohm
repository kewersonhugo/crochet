Crochet {
  Program =
    | header Declaration* end

  Declaration =
    | CommandDeclaration
    | DoDeclaration
    | SceneDeclaration
    | ActorDeclaration
    | RelationDeclaration
    
  DoDeclaration =
    | do_ StatementBlock

  SceneDeclaration =
    | scene_ Atom StatementBlock

  ActorDeclaration =
    | actor_ ActorName ";"

  RelationDeclaration =
    | relation_ RelationSignature ";"

  RelationSignature =
    | RelationSignatureSegment+

  RelationSignatureSegment =
    | Atom      -- static
    | Name "*"  -- many
    | Name      -- one

  CommandDeclaration =
    | command_ CommandSignature "=" Name "(" ListOf<Name, ","> ")" ";"  -- ffi
    | command_ CommandSignature StatementBlock                          -- local

  CommandSignature =
    | Name infix_symbol Name                -- infix
    | SignatureSegment SignatureSegment+    -- multi
    | Atom                                  -- single
  
  SignatureSegment =
    | Atom      -- static
    | Name      -- variable

  Statement =
    | ReturnStatement
    | GotoStatement
    | LetStatement
    | FactStatement
    | Expression ";"   -- expr

  ReturnStatement =
    | return_ Expression ";"  -- with_value
    | return_ ";"             -- naked

  GotoStatement =
    | goto_ Atom ";"

  LetStatement =
    | let_ Name "=" Expression ";"

  FactStatement =
    | fact_ FactSegment+ ";"

  FactSegment =
    | Atom                -- static
    | PrimaryExpression   -- variable

  StatementBlock =
    | ":" Statement* end_

  Expression =
    | SearchExpression

  SearchExpression =
    | search_ NonemptyListOf<SearchRelation, ",">    -- search
    | UseInfix

  SearchRelation =
    | SearchSegment+

  SearchSegment =
    | ActorName                -- actor
    | Integer                 -- integer
    | Float                   -- float
    | Text                    -- text
    | Boolean                 -- boolean
    | Nothing                 -- nothing
    | Name                    -- variable
    | Atom                    -- static

  UseInfix =
    | UseMixfix infix_symbol UseMixfix  -- infix
    | UseMixfix

  UseMixfix =
    | UseSegment UseSegment+            -- multi
    | PrimaryExpression

  UseSegment =
    | Atom                -- static
    | PrimaryExpression   -- variable

  PrimaryExpression =
    | Text
    | Number
    | Boolean
    | Nothing
    | ActorName           -- actor
    | Atom                -- atom
    | Name                -- variable
    | "(" Expression ")"  -- group

  Text = text
  Number = Integer | Float
  Integer = integer
  Float = float
  Boolean = boolean
  Name = ~reserved name
  Atom = atom
  ActorName = actor_name
  Nothing = nothing_

  // -- Lexical rules -------------------------------------------------
  header = "#" hs* "crochet" nl
  hs = " " | "\t"
  nl = "\n" | "\r"
  comment = "%" (~nl any)* nl
  spaces += comment

  atom_start = "a".."z"
  atom_rest = letter | digit | "-"
  atom = atom_start atom_rest*

  actor_name = "#" atom

  name_start = "A".."Z" | "_"
  name_rest = letter | digit | "-"
  name = name_start name_rest*

  symbol_char = "+" | "/" | "&" | "^" | "~" | "*" | "-" | "<" | ">" | "=" | "."
  infix_symbol = symbol_char+

  text_character =
    | "\\" "\""   -- escape
    | ~"\"" any   -- regular
  text = "\"" text_character* "\""

  dec_digit = "0".."9" | "_"
  integer = ~"_" dec_digit+
  float = ~"_" dec_digit+ "." dec_digit+

  boolean =
    | true_  -- true
    | false_ -- false

  kw<word> = word ~atom_rest

  true_ = kw<"TRUE">
  false_ = kw<"FALSE">
  nothing_ = kw<"NOTHING">
  scene_ = kw<"SCENE">
  command_ = kw<"COMMAND">
  do_ = kw<"DO">
  return_ = kw<"RETURN">
  goto_ = kw<"GOTO">
  let_ = kw<"LET">
  end_ = kw<"END">
  actor_ = kw<"ACTOR">
  relation_ = kw<"RELATION">
  fact_ = kw<"FACT">
  search_ = kw<"SEARCH">

  reserved =
    | true_ | false_ | nothing_ 
    | scene_ | command_ | do_ | return_ | goto_ | let_ | end_
    | actor_ | relation_ | fact_ | search_
}