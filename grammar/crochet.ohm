Crochet {
  Program =
    | header Declaration* end

  Declaration =
    | CommandDeclaration
    | DoDeclaration
    | SceneDeclaration
    | ActorDeclaration
    | RelationDeclaration
    | ActionDeclaration
    | ContextDeclaration
    
  DoDeclaration =
    | do_ StatementBlock

  SceneDeclaration =
    | scene_ Atom StatementBlock

  ContextDeclaration =
    | context_ Atom "{" HookDeclaration+ "}"

  HookDeclaration =
    | when_ Predicate StatementBlock

  ActorDeclaration =
    | actor_ ActorName "::" NonemptyListOf<Atom, ","> ";"   -- roles
    | actor_ ActorName ";"                                  -- no_roles

  RelationDeclaration =
    | relation_ RelationSignature ";"

  RelationSignature =
    | RelationSignatureSegment+

  RelationSignatureSegment =
    | Atom      -- static
    | Name "*"  -- many
    | Name      -- one

  CommandDeclaration =
    | command_ CommandSignature "=" Atom "(" ListOf<Name, ","> ")" ";"  -- ffi
    | command_ CommandSignature StatementBlock                          -- local

  CommandSignature =
    | Name infix_symbol Name           -- infix
    | Name KeywordSignaturePair+       -- self
    | Name Atom                        -- unary
    | KeywordSignaturePair+            -- prefix
    | Atom                             -- nullary
  
  KeywordSignaturePair =
    | Keyword Name

  ActionDeclaration =
    | action_ Text when_ Predicate StatementBlock

  Predicate =
    | NonemptyListOf<SearchRelation, ","> if_ Constraint    -- constrained
    | NonemptyListOf<SearchRelation, ",">                   -- unconstrained

  Constraint =
    | Constraint and_ Constraint    -- conjunction
    | Constraint or_ Constraint     -- disjunction
    | not_ Constraint               -- negate
    | ConstraintEq

  ConstraintEq =
    | ConstraintPrimary "===" ConstraintPrimary   -- eq
    | ConstraintPrimary "=/=" ConstraintPrimary   -- neq
    | ConstraintPrimary "::" Atom                 -- role
    | ConstraintPrimary

  ConstraintPrimary =
    | Name                  -- variable
    | ActorName             -- actor
    | "(" Constraint ")"    -- group

  Statement =
    | ReturnStatement
    | GotoStatement
    | LetStatement
    | FactStatement
    | ForgetStatement
    | ChooseAction
    | TriggerStatement
    | Expression ";"   -- expr

  ChooseAction =
    | choose_ action_ ";"

  TriggerStatement =
    | trigger_ Atom ";"

  ReturnStatement =
    | return_ Expression ";"  -- with_value
    | return_ ";"             -- naked

  GotoStatement =
    | goto_ Atom ";"

  LetStatement =
    | let_ Name "=" Expression ";"

  FactStatement =
    | fact_ FactUseSignature ";"

  ForgetStatement =
    | forget_ FactUseSignature ";"

  FactUseSignature =
    | FactSegment+

  FactSegment =
    | Atom                -- static
    | PrimaryExpression   -- variable

  StatementBlock =
    | "{" Statement* "}"

  Expression =
    | SearchExpression
    | IfExpression

  IfExpression =
    | if_ InvokeInfix then_ Expression else_ Expression

  SearchExpression =
    | search_ Predicate   -- search
    | InvokeInfix

  SearchRelation =
    | SearchSegment+

  SearchSegment =
    | ActorName               -- actor
    | Integer                 -- integer
    | Float                   -- float
    | Text                    -- text
    | Boolean                 -- boolean
    | Nothing                 -- nothing
    | Name                    -- variable
    | Atom                    -- static

  InvokeInfix =
    | InvokeMixfix infix_symbol InvokeMixfix  -- infix
    | InvokeMixfix

  InvokeMixfix =
    | InvokePostfix InvokePair+         -- self
    | InvokePair+                       -- prefix
    | InvokePostfix

  InvokePair =
    | Keyword InvokePostfix

  InvokePostfix =
    | InvokePostfix Atom        -- postfix
    | PrimaryExpression

  PrimaryExpression =
    | Text
    | Number
    | Boolean
    | Nothing
    | ActorName           -- actor
    | Atom                -- atom
    | Name                -- variable
    | "(" Expression ")"  -- group

  Text = text
  Number = Integer | Float
  Integer = integer
  Float = float
  Boolean = boolean
  Name = name
  Atom = ~reserved atom ~":"
  Keyword = keyword
  ActorName = actor_name
  Nothing = nothing_

  // -- Lexical rules -------------------------------------------------
  header = "%" hs* "crochet" nl
  hs = " " | "\t"
  nl = "\n" | "\r"
  line = (~nl any)*
  comment = "//" line
  space += comment

  atom_start = "a".."z"
  atom_rest = letter | digit | "-"
  atom = atom_start atom_rest*

  keyword = atom ":"

  actor_name = "#" atom

  name_start = "A".."Z" | "_"
  name_rest = letter | digit | "-"
  name = name_start name_rest*

  infix_symbol =
    | "+" | "-" | "*" | "/"
    | "<" | ">" | "<=" | ">="
    | "===" | "=/="

  text_character =
    | "\\" "\""   -- escape
    | ~"\"" any   -- regular
  text = "\"" text_character* "\""

  dec_digit = "0".."9" | "_"
  integer = ~"_" dec_digit+
  float = ~"_" dec_digit+ "." dec_digit+

  boolean =
    | true_  -- true
    | false_ -- false

  kw<word> = word ~atom_rest

  true_ = kw<"true">
  false_ = kw<"false">
  nothing_ = kw<"nothing">
  scene_ = kw<"scene">
  command_ = kw<"command">
  do_ = kw<"do">
  return_ = kw<"return">
  goto_ = kw<"goto">
  let_ = kw<"let">
  end_ = kw<"end">
  actor_ = kw<"actor">
  relation_ = kw<"relation">
  fact_ = kw<"fact">
  forget_ = kw<"forget">
  search_ = kw<"search">
  action_ = kw<"action">
  when_ = kw<"when">
  choose_ = kw<"choose">
  if_ = kw<"if">
  and_ = kw<"and">
  or_ = kw<"or">
  not_ = kw<"not">
  context_ = kw<"context">
  trigger_ = kw<"trigger">
  then_ = kw<"then">
  else_ = kw<"else">

  reserved =
    | true_ | false_ | nothing_ 
    | scene_ | command_ | do_ | return_ | goto_ | let_ | end_
    | actor_ | relation_ | fact_ | search_ | forget_ | action_
    | when_ | choose_ | if_ | and_ | or_ | not_ | context_ | trigger_
    | then_ | else_
}