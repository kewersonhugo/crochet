Crochet {
  program =
    | header declaration* space* end

  declaration =
    | commandDeclaration
    | doDeclaration
    | sceneDeclaration
    | actorDeclaration
    | relationDeclaration
    | actionDeclaration
    | contextDeclaration
    
  doDeclaration =
    | do_ statementBlock

  sceneDeclaration =
    | scene_ atom statementBlock

  contextDeclaration =
    | context_ atom s<"{"> hookDeclaration+ s<"}">

  hookDeclaration =
    | when_ predicate statementBlock

  actorDeclaration =
    | actor_ actorName actorRoles actorInitialisation

  actorRoles =
    | s<"::"> nonemptyListOf<atom, s<",">>    -- roles
    |                                         -- no_roles

  actorInitialisation =
    | s<"{"> actorFact+ s<"}">     -- init
    | ";"                          -- no_init

  actorFact =
    | factSignaturePair+ s<";">    -- keyword
    | atom s<";">                  -- unary

  relationDeclaration =
    | relation_ relationSignature s<";">

  relationSignature =
    | relationVariable relationSignaturePair+   -- keyword
    | relationVariable atom                     -- unary

  relationVariable =
    | name s<"*">  -- many
    | name         -- one

  relationSignaturePair =
    | keyword relationVariable

  commandDeclaration =
    | command_ commandSignature s<"="> atom s<"("> listOf<name, s<",">> s<")"> s<";">  -- ffi
    | command_ commandSignature statementBlock                                         -- local

  commandSignature =
    | name infix_symbol name           -- infix
    | name keywordSignaturePair+       -- self
    | name atom                        -- unary
    | keywordSignaturePair+            -- prefix
    | atom                             -- nullary
  
  keywordSignaturePair =
    | keyword name

  actionDeclaration =
    | repeatableMark action_ interpolateText<variable> actionTags when_ predicate statementBlock

  repeatableMark =
    | repeatable_     -- mark
    |                 -- no_mark

  actionTags =
    | s<"::"> nonemptyListOf<atom, ",">    -- tagged
    |                                   -- untagged

  predicate =
    | nonemptyListOf<searchRelation, s<",">> if_ constraint    -- constrained
    | nonemptyListOf<searchRelation, s<",">>                   -- unconstrained

  constraint =
    | constraint and_ constraint    -- conjunction
    | constraint or_ constraint     -- disjunction
    | not_ constraint               -- negate
    | constraintEq

  constraintEq =
    | constraintPrimary s<"==="> constraintPrimary   -- eq
    | constraintPrimary s<"=/="> constraintPrimary   -- neq
    | constraintPrimary s<">"> constraintPrimary     -- gt
    | constraintPrimary s<">="> constraintPrimary    -- gte
    | constraintPrimary s<"<"> constraintPrimary     -- lt
    | constraintPrimary s<"<="> constraintPrimary    -- lte
    | constraintPrimary s<"::"> atom                 -- role
    | constraintPrimary

  constraintPrimary =
    | integer                     -- integer
    | name                        -- variable
    | actorName                   -- actor
    | s<"("> constraint s<")">    -- group

  statement =
    | returnStatement
    | gotoStatement
    | letStatement
    | factStatement
    | forgetStatement
    | triggerAction
    | triggerStatement
    | expression s<";">   -- expr

  triggerAction =
    | trigger_ action_ s<";">

  triggerStatement =
    | trigger_ atom s<";">

  returnStatement =
    | return_ expression s<";">  -- with_value
    | return_ s<";">             -- naked

  gotoStatement =
    | goto_ atom s<";">

  letStatement =
    | let_ name s<"="> expression s<";">

  factStatement =
    | fact_ factUseSignature s<";">

  forgetStatement =
    | forget_ factUseSignature s<";">

  factUseSignature =
    | primaryExpression factSignaturePair+    -- keyword
    | primaryExpression atom                  -- unary

  factSignaturePair =
    | keyword primaryExpression

  statementBlock =
    | s<"{"> statement* s<"}">

  expression =
    | searchExpression
    | ifExpression

  ifExpression =
    | if_ invokeInfix then_ expression else_ expression

  searchExpression =
    | search_ predicate   -- search
    | invokeInfix

  searchRelation =
    | not_ searchSignature     -- negated
    | searchSignature          -- has

  searchSignature =
    | searchSegment searchSignaturePair+  -- keyword
    | searchSegment atom                  -- unary

  searchSignaturePair =
    | keyword searchSegment

  searchSegment =
    | actorName               -- actor
    | integer                 -- integer
    | float                   -- float
    | text                    -- text
    | boolean                 -- boolean
    | nothing                 -- nothing
    | name                    -- variable

  invokeInfix =
    | invokeMixfix infix_symbol invokeMixfix  -- infix
    | invokeMixfix

  invokeMixfix =
    | invokePostfix invokePair+         -- self
    | invokePair+                       -- prefix
    | invokePostfix

  invokePair =
    | keyword invokePostfix

  invokePostfix =
    | invokePostfix atom        -- postfix
    | memberExpression

  memberExpression =
    | memberExpression "." text   -- project
    | primaryExpression

  primaryExpression =
    | matchExpression
    | interpolateText<expression>
    | number
    | boolean
    | nothing
    | variable
    | atom                      -- atom
    | actorName                 -- actor
    | s<"("> expression s<")">  -- group

  matchExpression =
    | match_ s<"{"> matchClause+ s<"}">

  matchClause =
    | when_ predicate statementBlock  -- when
    | else_ statementBlock            -- default

  variable = name

  number = integer | float
  text = s<t_text>
  integer = s<t_integer>
  float = s<t_float>
  boolean = t_boolean
  name = s<t_name>
  atom = space* ~reserved t_atom ~":"
  keyword = s<t_keyword>
  actorName = s<t_actor_name>
  nothing = nothing_
  infix_symbol = s<t_infix_symbol>

  interpolateTextPart<p> =
    | "\\" any                   -- escape
    | "[" s<p> s<"]">            -- interpolate
    | ~"\"" any                  -- character

  interpolateText<p> (a text with interpolation) =
    | s<"\""> interpolateTextPart<p>* "\""

  s<p> = space* p
  // -- Lexical rules -------------------------------------------------
  header (a file header) = "%" hs* "crochet" nl
  hs = " " | "\t"
  nl = "\n" | "\r"
  line = (~nl any)*
  comment (a comment) = "//" line
  space += comment

  atom_start = "a".."z"
  atom_rest = letter | digit | "-"
  t_atom (an atom) = atom_start atom_rest*

  t_keyword (a keyword) = t_atom ":"

  t_actor_name (an actor name) = "#" t_atom

  name_start = "A".."Z" | "_"
  name_rest = letter | digit | "-"
  t_name (a name) = name_start name_rest*

  t_infix_symbol =
    | "+" | "-" | "*" | "/"
    | "<" | ">" | "<=" | ">="
    | "===" | "=/="

  dec_digit = "0".."9" | "_"
  t_integer (an integer) = ~"_" dec_digit+
  t_float (a floating-point number) = ~"_" dec_digit+ "." dec_digit+


  text_character =
    | "\\" "\""     -- escape
    | ~"\"" any     -- regular
  t_text (a text) =
    | "\"" text_character* "\""

  t_boolean (a boolean) =
    | true_  -- true
    | false_ -- false

  kw<word> = s<word> ~atom_rest

  true_ = kw<"true">
  false_ = kw<"false">
  nothing_ = kw<"nothing">
  scene_ = kw<"scene">
  command_ = kw<"command">
  do_ = kw<"do">
  return_ = kw<"return">
  goto_ = kw<"goto">
  let_ = kw<"let">
  end_ = kw<"end">
  actor_ = kw<"actor">
  relation_ = kw<"relation">
  fact_ = kw<"fact">
  forget_ = kw<"forget">
  search_ = kw<"search">
  action_ = kw<"action">
  when_ = kw<"when">
  choose_ = kw<"choose">
  if_ = kw<"if">
  and_ = kw<"and">
  or_ = kw<"or">
  not_ = kw<"not">
  context_ = kw<"context">
  trigger_ = kw<"trigger">
  then_ = kw<"then">
  else_ = kw<"else">
  match_ = kw<"match">
  repeatable_ = kw<"repeatable">

  reserved =
    | true_ | false_ | nothing_ 
    | scene_ | command_ | do_ | return_ | goto_ | let_ | end_
    | actor_ | relation_ | fact_ | search_ | forget_ | action_
    | when_ | choose_ | if_ | and_ | or_ | not_ | context_ | trigger_
    | then_ | else_ | match_ | repeatable_
}