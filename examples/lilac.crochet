type Player;
type Room;
type Exit;
type Item;

relation Player* name: Text;
relation Player* at: Room;
relation Player* has: Item*;

relation Room* name: Text;
relation Room* description: Text;
relation Room* exit: Text to: Room;
relation Room* visited-by: Player;
relation Room* has: Item*;

relation Item* name: Text;
relation Item* description: Text;

define player :: Player {
  name: "Nayla";
  at: forest;
  has: key;
};

define forest :: Room {
  name: "The Northern Forest";
  description:
    "A familiar place. The old trees have seen you fall and
     rise so many times during your childhood. The scent of
     this place soothes you.";
  exit: "up" to: room;
};

define room :: Room {
  name: "Nayla's Room";
  description:
    "When was the last time you cleaned your place? Kareya
     would be very angry at you---in her own way---had her
     seen how you manage things when she's not around.";
  exit: "down" to: forest;
};

define key :: Item {
  name: "A Golden Key";
  description: "A very small key you always carry around.";
}


%% Scenes are named nodes, which may have pre-conditions
scene prologue do
  "The Gray Bears had a tradition of sorts.";

  "It was a kind of initiation. Not the type one would go through
   when they decided to join the group. Or turned a certain age.
   Or accomplished so many things that a celebration---and promotion---
   was in order. Nothing so common as that.";

  "You'd be chosen. At some point---at a very specific point---should
   your luck decide to leave your side for even a flick of a second.";

  "And that night, @bold("your") luck did decide to disappear.";
end


%% When nodes are unamed nodes that fire automatically when the
%% pre-conditions are met, by forward chaining
when
  Player at: room,
  Player has: key,
  Player = player
do
  "This place has so many memories for you. Not all of them good ones.";

  "You remember when Kareya suggested just locking the bad memories up.
   That it would help you forget about them over time. You're not quite
   sure that second part ever happened."

  "Your hand reaches for the key in your pocket once again."

  unset Player has: key;
  set Room has: key;

  "You leave the key at the top of the table. <<It's better this way>>
   you tell yourself as you part with it."
end

%% A When (and Scene) node will run to completion before Crochet
%% picks a new node to play. However, nodes may yield at any point
%% to let the scheduler do other things before coming back to it.
when
  Player move-to: Room,
  Room name: Name,
  Room description: Description,
  Player = player
do
  unset Player move-to: Room;
  set Player at: Room;

  say bold(Name);

  %% Unification in an expression actually results in a stream of
  %% records. So this condition is "if we can't unify this expression
  %% with anything". Quantification offers ways of performing things
  %% for each unification match OTOH
  if not is-set(Room visited-by: Player) do
    say Description;
  end

  yield;  %% Definitely not what you want to do here B U T

  set Room visited-by: Player;
end


